// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String @db.Text
}

model User {
  clerkId   String     @id @unique
  firstName String?
  lastName  String?
  email     String
  phone     String?
  role      Role       @default(UNREGISTERED)
  promoter  Promoter?
  admin     Admin?
  developer Developer?

  @@map("users")
}

model Project {
  id                           String                  @id @default(cuid())
  pfeId                        String                  @unique
  title                        String
  description                  String                  @db.Text
  contextProblematic           String                  @db.Text
  objectives                   String                  @db.Text
  needsConstraints             String                  @db.Text
  expectedResults              String                  @db.Text
  trimester                    Trimester
  year                         Int
  promoterId                   Int
  promoter                     Promoter                @relation(fields: [promoterId], references: [id])
  numberOfIterations           Int
  organizationId               Int?
  organization                 Organization?           @relation(fields: [organizationId], references: [id])
  encouragementType            EncouragementType
  numberOfTeamsRequested       Int
  numberOfTeams                Int                     @default(1)
  numberOfStudents             Int
  multipleTeams                Boolean
  isMultidepartment            Boolean
  acceptsConfidentiality       Boolean
  authorizesCloudComputing     Boolean
  authorizesCloudOutsideQuebec Boolean
  mustRespectRegulations       Boolean
  isAssignedToTeacher          Boolean                @default(false)
  isSelectedDuringSemester     Boolean
  signatureImg                 File?
  pdfVersion                   String?
  submissionDate               DateTime                @default(now())
  departments                  DepartmentOnProject[]
  thematics                    ThematicOnProject[]
  states                       ProjectState[]
  representatives              ProjectRepresentative[]
  group                        Group?
  firstChoices                 StudentChoice[]         @relation("FirstProjectChoice")
  secondChoices                StudentChoice[]         @relation("SecondProjectChoice")
  thirdChoices                 StudentChoice[]         @relation("ThirdProjectChoice")
  fourthChoices                StudentChoice[]         @relation("FourthProjectChoice")
}

model Group {
  id        Int                @id @default(autoincrement())
  teachers  TeacherOnProject[]
  students  Student[]
  projectId String             @unique
  project   Project            @relation(fields: [projectId], references: [id])
}

model StudentChoice {
  id                 Int       @id @default(autoincrement())
  studentEmail       String
  student            Student   @relation(fields: [studentEmail], references: [email])
  firstProjectId     String
  firstProject       Project   @relation("FirstProjectChoice", fields: [firstProjectId], references: [id])
  secondProjectId    String
  secondProject      Project   @relation("SecondProjectChoice", fields: [secondProjectId], references: [id])
  thirdProjectId     String
  thirdProject       Project   @relation("ThirdProjectChoice", fields: [thirdProjectId], references: [id])
  fourthProjectId    String
  fourthProject      Project   @relation("FourthProjectChoice", fields: [fourthProjectId], references: [id])
  partners           Student[] @relation("StudentPartners")
  isPreApprovedInPfe Boolean
  isEnergyProfile    Boolean
  isHealthProfile    Boolean
  dateSubmitted      DateTime
  trimester          Trimester
  year               Int

  @@unique([studentEmail, trimester, year])
}

model File {
  key            String        @id
  name           String?
  type           FileType
  url            String
  uploadedAt     DateTime      @default(now())
  projectId      String?       @unique
  project        Project?      @relation(fields: [projectId], references: [id])
  organizationId Int?          @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])
}

model Organization {
  id          Int                    @id @default(autoincrement())
  name        String
  logo        File?
  description String?
  projects    Project[]
  promoters   PromoterOrganization[]
}

model Promoter {
  id              Int                    @id @default(autoincrement())
  projects        Project[]
  userId          String                 @unique
  user            User                   @relation(fields: [userId], references: [clerkId])
  hasBeenNotified Boolean?
  organizations   PromoterOrganization[]
}

model Representative {
  id               Int                     @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String
  phone            String?
  projectRelations ProjectRepresentative[]
}

model Teacher {
  id               Int                @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String
  phone            String?
  projectRelations TeacherOnProject[]
}

model Department {
  id               String                @id @default(cuid())
  type             DepartementETS
  projectRelations DepartmentOnProject[]
  adminRelations   AdminDepartment[]
}

model Thematic {
  id               Int                 @id @default(autoincrement())
  name             String
  courses          String
  projectRelations ThematicOnProject[]
}

model Student {
  firstName        String
  lastName         String
  email            String          @id @unique
  groupId          Int
  group            Group           @relation(fields: [groupId], references: [id])
  studentChoices   StudentChoice[]
  partneredChoices StudentChoice[] @relation("StudentPartners")
}

model Admin {
  id          Int               @id @default(autoincrement())
  userId      String            @unique
  user        User              @relation(fields: [userId], references: [clerkId])
  departments AdminDepartment[]
}

model Developer {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [clerkId])
}

model AdminDepartment {
  adminId      Int
  admin        Admin      @relation(fields: [adminId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  @@id([adminId, departmentId])
}

model TeacherOnProject {
  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  projectId String
  groupId   Int?
  group     Group?  @relation(fields: [groupId], references: [id])
  contacted Boolean

  @@id([teacherId, projectId])
}

model DepartmentOnProject {
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id])

  @@id([departmentId, projectId])
}

model ThematicOnProject {
  thematicId Int
  thematic   Thematic @relation(fields: [thematicId], references: [id])
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])

  @@id([thematicId, projectId])
}

model PromoterOrganization {
  promoterId     Int
  organizationId Int
  promoter       Promoter     @relation(fields: [promoterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([promoterId, organizationId])
}

model ProjectRepresentative {
  projectId        String
  project          Project        @relation(fields: [projectId], references: [id])
  representativeId Int
  representative   Representative @relation(fields: [representativeId], references: [id])

  @@id([projectId, representativeId])
}

model ProjectState {
  id        Int           @id @default(autoincrement())
  projectId String
  project   Project       @relation(fields: [projectId], references: [id])
  state     ProjectStatus
  timestamp DateTime      @default(now())

  @@index([timestamp])
}

enum DepartementETS {
  CTN
  ELE
  GOL
  GPA
  LOG_TI
  MEC
}

enum EncouragementType {
  WEEKLY
  UPON_REQUEST
  NO_ENCOURAGEMENT
}

enum Role {
  UNREGISTERED
  PROMOTER
  STUDENT
  TEACHER
  ADMIN
  DEVELOPER
}

enum Trimester {
  WINTER
  AUTOMNE
  SUMMER
}

enum FileType {
  PDF
  IMAGE
  VIDEO
  AUDIO
  ZIP
}

enum ProjectStatus {
  DRAFT
  EVALUATION
  APPROBATION
  INVALID
  REJECTED
  ADJUSTMENT
  ACCEPTED
  WAITING_FOR_ENROLMENT
  ENROLMENT
  PFE_SELECTION
  GROUP_CREATION
  GROUP_VALIDATION
  TEACHER_NEEDED
  GROUP_CORRECTION
  READY
  NOT_SELECTED
  WAITING_FOR_TRIMESTER
  IN_PROGRESS
  COMPLETE
  NEXT_PHASE
  ENDED
  REPROPOSAL
}
