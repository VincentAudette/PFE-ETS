generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  clerkId   String     @id @unique
  firstName String?
  lastName  String?
  email     String
  phone     String?
  role      Role       @default(UNREGISTERED)
  promoter  Promoter?
  admin     Admin?
  developer Developer?
  @@map("users")
}

model Project {
  id                           String                  @id @default(cuid())
  pfeId                        String                  @unique
  title                        String
  trimester                    Trimester
  year                         Int
  promoterId                   Int
  promoter                     Promoter                @relation(fields: [promoterId], references: [id])
  organizationId               Int
  organization                 Organization            @relation(fields: [organizationId], references: [id])
  encouragementType            EncouragementType
  numberOfTeamsRequested       Int
  numberOfStudents             Int
  isMultiDepartment            Boolean
  acceptsConfidentiality       Boolean
  authorizesCloudComputing     Boolean
  authorizesCloudOutsideQuebec Boolean
  mustRespectRegulations       Boolean
  submissionDate               DateTime                @default(now())
  description                  String                  @db.Text
  requiredSkills               String                  @db.Text
  contextProblematic           String                  @db.Text
  expectedResults              String                  @db.Text
  needsConstraints             String                  @db.Text
  objectives                   String                  @db.Text
  files                        File[]
  isMultipleTeams              Boolean?                @default(false)
  numberOfTeams                Int?                    @default(1)
  numberOfIterations           Int?                    @default(0)
  isSelectedDuringSemester     Boolean?
  isAssignedToTeacher          Boolean?                @default(false)
  group                        Group?
  otherThematics               String?
  mainDepartmentId             String
  departments                  DepartmentOnProject[]
  firstChoices                 StudentChoice[]         @relation("FirstProjectChoice")
  secondChoices                StudentChoice[]         @relation("SecondProjectChoice")
  thirdChoices                 StudentChoice[]         @relation("ThirdProjectChoice")
  fourthChoices                StudentChoice[]         @relation("FourthProjectChoice")
  thematics                    ThematicOnProject[]
  representatives              RepresentativeOnProject[]
  teachers                     TeacherOnProject[]
  states                       ProjectState[]
}

model Group {
  id        Int                @id @default(autoincrement())
  projectId String             @unique
  project   Project            @relation(fields: [projectId], references: [id])
  students  Student[]
}

model StudentChoice {
  id                 Int       @id @default(autoincrement())
  firstProjectId     String
  secondProjectId    String
  thirdProjectId     String
  fourthProjectId    String
  isPreApprovedInPfe Boolean
  isEnergyProfile    Boolean
  isHealthProfile    Boolean
  trimester          Trimester
  year               Int
  studentEmail       String
  dateSubmitted      DateTime
  student            Student   @relation(fields: [studentEmail], references: [email])
  firstProject       Project   @relation("FirstProjectChoice", fields: [firstProjectId], references: [id])
  secondProject      Project   @relation("SecondProjectChoice", fields: [secondProjectId], references: [id])
  thirdProject       Project   @relation("ThirdProjectChoice", fields: [thirdProjectId], references: [id])
  fourthProject      Project   @relation("FourthProjectChoice", fields: [fourthProjectId], references: [id])

  @@unique([studentEmail, trimester, year])
}

model File {
  key            String        @id
  name           String?
  type           FileType
  url            String
  uploadedAt     DateTime      @default(now())
  organizationId Int?          @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])
  projectId      String?
  project        Project?       @relation(fields: [projectId], references: [id])
}

model Organization {
  id          Int                    @id @default(autoincrement())
  name        String               @db.VarChar(500)
  description String?
  projects    Project[]
  logo        File?
  promoters   PromoterOrganization[]
}

model Promoter {
  id              Int                    @id @default(autoincrement())
  userId          String                 @unique
  hasBeenNotified Boolean?
  projects        Project[]
  user            User                   @relation(fields: [userId], references: [clerkId])
  organizations   PromoterOrganization[]
}

model Representative {
  id               Int                     @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String                  @unique
  phone            String?
  projectRelations RepresentativeOnProject[]
}

model Teacher {
  id               Int                @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String            @unique
  phone            String?
  projectRelations TeacherOnProject[]
}

model Department {
  id               String                @id @default(cuid())
  type             DepartementETS
  thematics        Thematic[]
  adminRelations   AdminDepartment[]
  projectRelations DepartmentOnProject[]
  students         Student[]            
}

model Thematic {
  id               Int                 @id @default(autoincrement())
  name             String
  departmentId     String
  departement      Department          @relation(fields: [departmentId], references: [id])
  projectRelations ThematicOnProject[]

  @@index([departmentId], map: "departmentId")
  @@unique([name, departmentId])
}

model Student {
  email          String          @id @unique
  clerkId        String?
  firstName      String
  groupId        Int?
  lastName       String
  studentChoices StudentChoice[]
  departmentId   String
  department     Department     @relation(fields: [departmentId], references: [id])
  group          Group?          @relation(fields: [groupId], references: [id])
  @@index([clerkId])
}


model Admin {
  id          Int               @id @default(autoincrement())
  userId      String            @unique
  user        User              @relation(fields: [userId], references: [clerkId])
  departments AdminDepartment[]
}

model Developer {
  id     Int    @id @default(autoincrement())
  userId String @unique
  user   User   @relation(fields: [userId], references: [clerkId])
}

model AdminDepartment {
  adminId      Int
  departmentId String
  admin        Admin      @relation(fields: [adminId], references: [id])
  department   Department @relation(fields: [departmentId], references: [id])

  @@id([adminId, departmentId])
}

model TeacherOnProject {
  teacherId Int
  projectId String
  contacted Boolean
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
  @@id([teacherId, projectId])
}

model DepartmentOnProject {
  departmentId String
  projectId    String
  department   Department @relation(fields: [departmentId], references: [id])
  project      Project    @relation(fields: [projectId], references: [id])

  @@id([departmentId, projectId])
}

model ThematicOnProject {
  thematicId Int
  projectId  String
  thematic   Thematic @relation(fields: [thematicId], references: [id])
  project    Project  @relation(fields: [projectId], references: [id])

  @@id([thematicId, projectId])
}

model PromoterOrganization {
  promoterId     Int
  organizationId Int
  promoter       Promoter     @relation(fields: [promoterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([promoterId, organizationId])
}

model RepresentativeOnProject {
  projectId        String
  representativeId Int
  project          Project        @relation(fields: [projectId], references: [id])
  representative   Representative @relation(fields: [representativeId], references: [id])

  @@id([projectId, representativeId])
}

model ProjectState {
  id        Int           @id @default(autoincrement())
  projectId String
  state     ProjectStatus
  timestamp DateTime      @default(now())
  project   Project       @relation(fields: [projectId], references: [id])

  @@index([timestamp])
}

model StudentPartners {
  A String
  B Int

  @@unique([A, B], map: "_StudentPartners_AB_unique")
  @@index([B], map: "_StudentPartners_B_index")
  @@map("_StudentPartners")
}

enum DepartementETS {
  CTN
  ELE
  GOL
  GPA
  LOG_TI
  MEC
}

enum EncouragementType {
  WEEKLY
  UPON_REQUEST
  NO_ENCOURAGEMENT
}

enum Role {
  UNREGISTERED
  PROMOTER
  STUDENT
  TEACHER
  ADMIN
  DEVELOPER
}

enum Trimester {
  WINTER
  AUTOMNE
  SUMMER
}

enum FileType {
  PDF
  IMAGE
  VIDEO
  AUDIO
  ZIP
}

enum ProjectStatus {
  DRAFT
  EVALUATION
  APPROBATION
  INVALID
  REJECTED
  ADJUSTMENT
  ACCEPTED
  WAITING_FOR_ENROLMENT
  ENROLMENT
  PFE_SELECTION
  GROUP_CREATION
  GROUP_VALIDATION
  TEACHER_NEEDED
  GROUP_CORRECTION
  READY
  NOT_SELECTED
  WAITING_FOR_TRIMESTER
  IN_PROGRESS
  COMPLETE
  NEXT_PHASE
  ENDED
  REPROPOSAL
}
